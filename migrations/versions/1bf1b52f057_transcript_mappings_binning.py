"""Transcript mappings binning

Revision ID: 1bf1b52f057
Revises: 225a8b4c3902
Create Date: 2015-10-29 10:02:15.286139

"""

from __future__ import unicode_literals

# revision identifiers, used by Alembic.
revision = '1bf1b52f057'
down_revision = u'225a8b4c3902'

from alembic import op
import sqlalchemy as sa
from sqlalchemy import sql
import binning


def upgrade():
    # We want to add a NOT NULL column without default value. So we first add
    # the column without the constraint, then populate it, then add the
    # constraint.
    # Unfortunately, SQLite doesn't support adding the constraint on an
    # existing column. We use batch_alter_table to workaround this. Of course
    # this makes the entire migration horribly awkward on SQLite, but I can't
    # really be bothered to improve it. This works.
    # Also, the downgrade will fail on SQLite, but we don't support downgrades
    # anyway, so I'm not fixing it.
    connection = op.get_bind()

    op.add_column('transcript_mappings', sa.Column('bin', sa.Integer(), nullable=True))

    transcript_mappings = sql.table('transcript_mappings',
                                    sql.column('id', sa.Integer()),
                                    sql.column('start', sa.Integer()),
                                    sql.column('stop', sa.Integer()),
                                    sql.column('bin', sa.Integer()))

    result = connection.execute(
        transcript_mappings.select().with_only_columns([
            transcript_mappings.c.id,
            transcript_mappings.c.start,
            transcript_mappings.c.stop]))

    while True:
        chunk = result.fetchmany(1000)
        if not chunk:
            break

        statement = transcript_mappings.update().where(
            transcript_mappings.c.id == sql.bindparam('m_id')
        ).values({'bin': sql.bindparam('m_bin')})

        connection.execute(statement, [
            {'m_id': m.id, 'm_bin': binning.assign_bin(m.start - 1, m.stop)}
            for m in chunk])

    # See note above.
    with op.batch_alter_table('transcript_mappings') as batch_op:
        batch_op.alter_column('bin', nullable=False, existing_type=sa.Integer())

    op.create_index(op.f('ix_transcript_mappings_bin'), 'transcript_mappings', ['bin'], unique=False)


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_transcript_mappings_bin'), table_name='transcript_mappings')
    op.drop_column('transcript_mappings', 'bin')
    ### end Alembic commands ###
